name: Publish to ECR and ECS

on:
  workflow_call:
    inputs:
      aws_region:
        type: string
        required: true
      ecr_repository:
        type: string
        required: true
      ecs_cluster:
        type: string
        required: true
      ecs_service:
        type: string
        required: true
      package:
        type: string
        required: true
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true


jobs:
  deploy:
    name: Deploy to ECR and ECS
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
        - name: Checkout
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1-node16
          with:
            aws-access-key-id: ${{ secrets.aws_access_key_id }}
            aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
            aws-region: ${{ inputs.aws_region }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ inputs.ecr_repository }}
            IMAGE_TAG: ${{ github.sha }}
          run: |
            npm run docker:build
            cd packages/${{ inputs.package }}
            docker build --file Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
            aws ecs update-service --region us-east-1 --cluster ${{ inputs.ecs_cluster }} --service ${{ inputs.ecs_service }} --force-new-deployment

        - name: Logout of Amazon ECR
          if: always()
          run: docker logout ${{ steps.login-ecr.outputs.registry }}
